{"version":3,"sources":["lookup/components.js","tweets/lookup.js","tweets/buttons.js","profiles/components.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/feed.js","tweets/components.js","App.js","reportWebVitals.js","index.js"],"names":["backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","onerror","e","send","apiTweetList","username","nextUrl","undefined","replace","apiTweetFeed","ActionButton","props","tweet","action","didPerformAction","likes","actionDisplay","display","className","handleActionBackendEvent","console","log","onClick","event","preventDefault","tweetId","id","apiTweetAction","type","UserDisplay","user","fullname","includeFullName","Fragment","UserLink","children","UserPicture","ParentTweet","parent","Tweet","retweeter","isRetweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","path","pathname","idRegex","match","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","TweetList","tweetsInit","setTweetInit","tweets","setTweets","setNextUrl","tweetDidSet","setTweetDidsSet","useEffect","final","newTweets","concat","next","results","alert","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","items","index","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","onSubmit","newvalue","current","value","ref","required","placeholder","TweetFeedList","TweetConponents","setnewTweets","canTweet","tempNewTweet","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render_id","getElementById","ReactDOM","render","createElement","our_id","dataset","querySelectorAll","forEach","container","our_feed_id"],"mappings":"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","file":"static/js/main.249b14b3.chunk.js","sourcesContent":["\nfunction getCookie(name) {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    var cookies = document.cookie.split(';');\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === (name + '=')) {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n  let jsonData;\n  if (data) {\n    jsonData = JSON.stringify(data)\n  }\n  const xhr = new XMLHttpRequest()\n  var url = `http://localhost:8000/api${endpoint}`\n  xhr.responseType = 'json'\n  const csrftoken = getCookie('csrftoken');\n  xhr.open(method, url)\n  xhr.setRequestHeader('Content-Type', 'application/json')\n  if (csrftoken) {\n    // xhr.setRequestHeader('HTTP_X_REQUESTED_WITH', 'XMLHttpRequest')\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest')\n    xhr.setRequestHeader('X-CSRFToken', csrftoken)\n  }\n  xhr.onload = function () {\n    if (xhr.status === 403){\n      if (xhr.response.detail === \"Authentication credentials were not provided.\"){\n        window.location.href='/login?show_login_requried=true'\n      }\n    }\n    callback(xhr.response, xhr.status)\n  }\n  xhr.onerror = (e) => {\n    // calling callback we defind this or passig a arg  \n    callback({ 'message': 'the message was an error' }, 400)\n  }\n\n  xhr.send(jsonData)\n}\n\n","import { backendLookup } from '../lookup'\n\n\nexport function apiTweetCreate(newTweet, callback) {\n    backendLookup(\"POST\", \"/tweet/create/\", callback, { content: newTweet })\n}\n\n\nexport function apiTweetAction(tweetId,action, callback) {\n    const data = { id : tweetId , action : action }\n    backendLookup(\"POST\", \"/tweet/action/\", callback, data)\n}\n\n\nexport function apiTweetDetail(tweetId ,callback) {\n\n    backendLookup(\"GET\", `/tweet/${tweetId}/`, callback)\n}\n\n\n\n\n// xhr ajax request \nexport function apiTweetList(username,callback,nextUrl) {\n    let endpoint  = \"/tweet/\"\n    if (username){\n        endpoint = `/tweet/?username=${username}`\n    }\n    if (nextUrl !== null && nextUrl !== undefined){\n        // replace method using for remove domain of site\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n    }\n    backendLookup(\"GET\",endpoint, callback)\n}\n\nexport function apiTweetFeed(callback,nextUrl) {\n    let endpoint  = \"/tweet/feed/\"   // HERE API IS ALLREADY INCULDE IN LOOKUP FOLDER' COMPONETS.JS\n    if (nextUrl !== null && nextUrl !== undefined){\n        // replace method using for remove domain of site\n        endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\n    }\n    backendLookup(\"GET\",endpoint, callback)\n}\n\n","\nimport {apiTweetAction } from './lookup'\n\nexport function ActionButton(props) {\n    const { tweet, action, didPerformAction } = props\n    const likes = tweet.likes ? tweet.likes : 0\n    const actionDisplay = action.display ? action.display : \"Action\"\n    const display = action.display === 'likes' ? `${likes} ${action.display}` : actionDisplay\n    const className = props.className ? props.className : 'btn shadow-sm btn-primary'\n\n\n    const handleActionBackendEvent = (response, status) => {\n        console.log(\"response \", response, \"status \", status)\n        if ((status === 200 || status === 201) && didPerformAction) {\n            didPerformAction(response, status)\n        }\n    }\n\n\n    // this is function like lamda in python\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\n    }\n\n    return <button className={className} onClick={handleClick} >   {display}   </button>\n}","import React from 'react'\n\nexport function UserDisplay(props) {\n    const { user, includeFullName } = props\n    const fullname = includeFullName === true ? `` : null\n    return <React.Fragment>\n        {fullname}\n        <span >@{user.username}</span>\n    </React.Fragment>\n}\n\n\nexport function UserLink(props) {\n    const { username } = props\n    // event is a defalut arg when you click a button or perfom and event\n    const handleUserLink = (event) => {\n        window.location.href = `profiles/${username}/`\n    }\n    return <span className=\"pointer\" onClick={handleUserLink}>\n        {props.children}\n    </span>\n}\n\n\n// user pictrue calling in Tweet\nexport function UserPicture(props) {\n    const { user } = props\n    return <UserLink username={user.username} >\n        <span className='px-3 py-2 rounded-circle text-white bg-dark' >{user.username[0]}</span>\n    </UserLink>\n\n}","import React, { useState } from 'react'\nimport { ActionButton } from './buttons'\nimport { UserDisplay,UserLink,UserPicture } from \"../profiles/\"\n\n\nexport function ParentTweet(props) {\n    const { tweet } = props\n    return tweet.parent ? <Tweet retweeter={props.retweeter} isRetweet hideActions className={' '} tweet={tweet.parent} /> : null\n}\n\n\n// this fuction we calling where we rendering or where we calling map function AS A Tweet tag\n// THIS FUNCTION SHOWING OUR DATA IN PROPER WAY\n// and here if you call a function as like a tag you must need use props\n\n\n\n\n\n\nexport function Tweet(props) {\n    const { tweet, didRetweet, hideActions, isRetweet, retweeter } = props\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n\n\n    const path = window.location.pathname\n    const idRegex = /(?<tweetid>\\d+)/\n    const match = path.match(idRegex)\n    const urlTweetId = match ? match.groups.tweetid : -1\n\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\n\n    const handleLink = (event) => {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n    }\n\n    const handlePerformAction = (newActionTweet, status) => {\n        console.log('newAction tweet ', newActionTweet, status)\n        if (status === 200) {\n            setActionTweet(newActionTweet)\n        } else if (status === 201) {\n            if (didRetweet) {\n                didRetweet(newActionTweet)\n            }\n        }\n    }\n    // this is check if class exists then return same else we given\n    // this is a ternary opreator or you can say  ? same like java\n    const className = props.className ? props.className : 'col-10 mx-auto p-3 col-md-6'\n    return <div className={className}>\n        {isRetweet === true && <div className='col-12 mb-3'> <span className='small text-muted' > Retweet Via  @ <UserDisplay user={retweeter} /> </span>  </div>}\n        <div className='d-flex' >\n            <UserPicture user={tweet.user} ></UserPicture>\n            <div className=\"col-11\">\n                {/* <p> {tweet.user.first_name}{' '}\n                    {tweet.user.last_name}{' '}\n                    @{tweet.user.username} </p> */}\n             <UserLink username={tweet.user.username}><UserDisplay includeFullName user={tweet.user} /></UserLink>   \n                <p>{tweet.content} </p>\n                <ParentTweet tweet={tweet} retweeter={tweet.user} />\n            </div>\n        </div>\n\n        <div className=\"btn btn-group\" >\n            {/* we create a fregment for only action buttoons */}\n            {(actionTweet && hideActions !== true) && <React.Fragment>\n                <ActionButton tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"like\", display: 'likes' }} />\n                <ActionButton tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"unlike\", display: 'unlike' }} />\n                <ActionButton tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: \"retweet\", display: 'retweet' }} />\n            </React.Fragment>}\n\n            {isDetail === true ? null : < button className=' btn btn-sm btn-outline-primary' onClick={handleLink}> view </button>}\n        </div>\n    </div>\n}\n","import React, { useEffect, useState } from 'react'\nimport { apiTweetList } from './lookup'\nimport { Tweet } from './detail'\n\n\n\nexport function TweetList(props) {\n    // use effect take a function as a argument\n    const [tweetsInit, setTweetInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    // this is important when you use respone pagination  beacuse pagination provide we \n    //  a next page url\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetDidSet, setTweetDidsSet] = useState(false)\n    // we going another useEffect for newTweet\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n            setTweets(final)\n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetDidSet === false) {\n            const handleTweetListLookup = (response, status) => {\n                if (status === 200) {\n                    // i added here results after pagination\n                    setNextUrl(response.next)\n                    setTweetInit(response.results)\n                    setTweetDidsSet(true)\n                }\n                else {\n                    alert('an error accur')\n                }\n            }\n\n            apiTweetList(props.username, handleTweetListLookup)\n        }\n\n    }, [tweetsInit, tweetDidSet, setTweetDidsSet, props.username])\n    // setTweetInit([...newTweets].concat(tweetInit))\n\n    const handleDidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit]\n        updateTweetsInit.unshift(newTweet)\n        setTweetInit(updateTweetsInit)\n\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(tweets)\n        setTweets(updateFinalTweets)\n    }\n\n    const handleLoadNext = (event) => {\n        event.preventDefault()\n        if (nextUrl !== null) {\n            const handleLoadNextResponse = (response, status) => {\n                if (status === 200) {\n                    // i added here results after pagination\n                    setNextUrl(response.next)\n                    // this step will load our all tweets on same page\n                    const newTweets = [...tweets].concat(response.results)\n                    setTweetInit(newTweets)\n                    setTweets(newTweets)\n                }\n                else {\n                    alert('an error accur')\n                }\n            }\n            // here first argument is username a secound is the user \n            apiTweetList(props.username, handleLoadNextResponse, nextUrl)\n        }\n\n    }\n\n    // we show all tweets's in a fregment beacuse we going create a load button\n    return <React.Fragment>\n        {tweets.map((items, index) => {\n            return <Tweet tweet={items}\n                didRetweet={handleDidRetweet}\n                className='py-5 px-5 mt-1 border-radius shadow-sm  bg-white text-dark'\n                key={`${index}-{item.id}`} />\n        })}\n        {nextUrl !== null && <button onClick={handleLoadNext} className=\"btn mt-5 mb-5 btn-outline-primary\">Load More ...</button>}\n    </React.Fragment>\n}\n","import React from 'react'\nimport { apiTweetCreate } from './lookup'\n\nexport function TweetCreate(props) {\n    const textAreaRef = React.createRef()\n    const { didTweet } = props\n\n    // callback\n    // change this to server side call\n    const handleBackendUpdate = (response, status) => {\n        // backend response api request handler\n        if (status === 201) {\n            // you can use pust but we get newest tweets on top so using unshift \n            didTweet(response)\n        }\n        else {\n            alert(\"data not sended to backend something went wrong\")\n        }\n    }\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        // this is will all tempnewTweet in newTweets which allready a var\n        const newvalue = textAreaRef.current.value\n        // backend response api request\n        apiTweetCreate(newvalue, handleBackendUpdate)\n        textAreaRef.current.value = ''\n    }\n    return <div className='container'>\n        <div className=\"container mt-5 p-2\">\n            <h1 className='offset-1' > Welcome on react tweets </h1>\n        </div>\n\n        {/* this is the main concept */}\n        <div className={props.className}>\n            <form onSubmit={handleSubmit} >\n                <textarea ref={textAreaRef} required={true} className='form-control' placeholder=' tweet here....' ></textarea>\n                <button type='submit' className='btn btn-primary my-3'> tweet </button>\n            </form>\n        </div>\n        {/* {...props } is pass self props */}\n    </div>\n\n}\n","import React, { useEffect, useState } from 'react'\nimport { apiTweetFeed } from './lookup'\nimport { Tweet } from './detail'\n\n\n// I REAPT MY SELF BEACUSE THE TWEET LIST AND TWEET FEED BOTH ARE SAME BUT DIFFRENT THING BEACUSE THE   \n\n\nexport function TweetFeedList(props) {\n    // use effect take a function as a argument\n    const [tweetsInit, setTweetInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    // this is important when you use respone pagination  beacuse pagination provide we \n    //  a next page url\n    const [nextUrl, setNextUrl] = useState(null)\n    const [tweetDidSet, setTweetDidsSet] = useState(false)\n    // we going another useEffect for newTweet\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length) {\n            setTweets(final)    \n        }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetDidSet === false) {\n            const handleTweetListLookup = (response, status) => {\n                if (status === 200) {\n                    // i added here results after pagination\n                    setNextUrl(response.next)\n                    setTweetInit(response.results)\n                    setTweetDidsSet(true)\n                }\n                else {\n                    alert('an error accur')\n                }\n            }\n\n            apiTweetFeed(handleTweetListLookup)\n        }\n\n    }, [tweetsInit, tweetDidSet, setTweetDidsSet, props.username])\n    // setTweetInit([...newTweets].concat(tweetInit))\n\n    const handleDidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit]\n        updateTweetsInit.unshift(newTweet)\n        setTweetInit(updateTweetsInit)\n\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(tweets)\n        setTweets(updateFinalTweets)\n    }\n\n    const handleLoadNext = (event) => {\n        event.preventDefault()\n        if (nextUrl !== null) {\n            const handleLoadNextResponse = (response, status) => {\n                if (status === 200) {\n                    // i added here results after pagination\n                    setNextUrl(response.next)\n                    // this step will load our all tweets on same page\n                    const newTweets = [...tweets].concat(response.results)\n                    setTweetInit(newTweets)\n                    setTweets(newTweets)\n                }\n                else {\n                    alert('an error accur')\n                }\n            }\n            // here first argument is username a secound is the user \n            apiTweetFeed(handleLoadNextResponse, nextUrl)\n        }\n\n    }\n\n    // we show all tweets's in a fregment beacuse we going create a load button\n    return <React.Fragment>\n        {tweets.map((items, index) => {\n            return <Tweet tweet={items}\n                didRetweet={handleDidRetweet}\n                className='py-5 px-5 mt-1 border-radius shadow-sm  bg-white text-dark'\n                key={`${index}-{item.id}`} />\n        })}\n        {nextUrl !== null && <button onClick={handleLoadNext} className=\"btn mt-5 mb-5 btn-outline-primary\">Load More ...</button>}\n    </React.Fragment>\n}\n","import React, { useEffect,useState } from 'react'\nimport { TweetList } from './list'\nimport {TweetCreate} from './create'\nimport {apiTweetDetail} from './lookup'\nimport { Tweet } from './detail'\nimport {TweetFeedList} from './feed'\n\n\n\n\n\nexport function TweetFeedConponents(props) {\n    const [newTweets, setnewTweets] = useState([])\n    // change this to server side call\n    const canTweet = props.canTweet === \"false\" ? false : true\n\n    const handleNewTweet = (newTweet) => {\n        let tempNewTweet = [...newTweets]\n        // backend response api request handler\n        // you can use pust but we get newest tweets on top so using unshift \n        tempNewTweet.unshift(newTweet)\n        setnewTweets(tempNewTweet)\n    }\n    return <div className='container'>\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-10 offset-1' ></TweetCreate>}\n        {/*  {...props } is pass self props  */}\n        <TweetFeedList newTweets={newTweets} {...props} />\n    </div>\n}\n\n\n\n\n\n\n\n// this function have username and can tweet beacuse we have mantion in api class\n// this function showing our data on react page \nexport function TweetConponents(props) {\n    const [newTweets, setnewTweets] = useState([])\n    // change this to server side call\n    const canTweet = props.canTweet === \"false\" ? false : true\n\n    const handleNewTweet = (newTweet) => {\n        let tempNewTweet = [...newTweets]\n        // backend response api request handler\n        // you can use pust but we get newest tweets on top so using unshift \n        tempNewTweet.unshift(newTweet)\n        setnewTweets(tempNewTweet)\n    }\n    return <div className='container'>\n        {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-10 offset-1' ></TweetCreate>}\n        {/*  {...props } is pass self props  */}\n        <TweetList newTweets={newTweets} {...props} />\n    </div>\n}\n\n\nexport function TweetDetailComponent(props){\n    const {tweetId} = props\n    const [didLookup,setDidLookup] = useState(false)\n    const [tweet,setTweet] = useState(null)\n\n    const handleBackendLookup = (response,status)=>{\n        console.log(\"the status : \",response,status)\n        if (status === 200){\n            setTweet(response)\n        }else{\n            alert(\"there is a error to finding your tweet\")\n        }\n    }\n\n    useEffect(()=>{\n        if (didLookup === false){\n            apiTweetDetail(tweetId,handleBackendLookup)\n            setDidLookup(true)\n        }\n    },[didLookup,setDidLookup,tweetId])\n\n    return tweet === null ? null : <Tweet tweet = {tweet} className={props.className}></Tweet>\n}","import React from 'react'\nimport { TweetConponents } from './tweets'\n\n\n// started on 2 dec 2020 -- naresh swami\nfunction App() {\n  return (\n        <div className=\"container mt-5 p-5 \">\n          <h1 className='offset-1' > Welcome on react tweets </h1>\n          <TweetConponents />\n        </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {TweetFeedConponents,TweetConponents, TweetDetailComponent } from './tweets';\n\n\n\nconst render_id = document.getElementById('root')\n\nif (render_id) {\n  ReactDOM.render(<App />, render_id);\n}\n\n\n\nconst e = React.createElement\n\nconst our_id = document.getElementById('tweetme-2')\nif (our_id) {\n  ReactDOM.render(\n    e(TweetConponents, our_id.dataset), our_id)\n}\n\n\n// selected using class\nconst tweetDetailElemenet = document.querySelectorAll(\".tweetme-2-detail\")\ntweetDetailElemenet.forEach(container => {\n  ReactDOM.render(\n    e(TweetDetailComponent, container.dataset), container)\n\n})\n\nconst our_feed_id = document.getElementById('tweetme-2-feed')\nif (our_feed_id) {\n  ReactDOM.render(\n    e(TweetFeedConponents, our_feed_id.dataset), our_feed_id)\n}\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}